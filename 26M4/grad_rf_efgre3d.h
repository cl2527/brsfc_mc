/*@Start***********************************************************/
/* GEMSBG Include File
 * Copyright (C) 1990 The General Electric Company
 *
 *	Include File Name:  grad_rf_fgre3d
 *	Developer: 		
 *		4/2/92		Elizabeth Abrahams
 *
 * $Source: grad_rf_efgre3d.h $
 * $Revision: 1.2 $  $Date: 22 Jul 1996 18:06:45 $
 */

/*@Synopsis 
  This holds the structure used for Gradient heating and SAR calculations.
*/     

/*@Description 

  This structure is used to track the rf  heating, SAR heating, Grad
  coil heating, grad amplifier heating. 
     
*/

/*@End*********************************************************/




RF_PULSE rfpulse[MAX_RFPULSE] = {
  /* RFPULSE 0 - Default SATX 1 Pulse */
  {
    (int*)&pw_rfsx1,
    (float*)&a_rfsx1,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfsx1,
    3200.0,
    1000.0,/* Saturation, not excitation, bw */
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfsx1,
    0,
    (int*)&wg_rfsx1
  },
  /* RFPULSE 1 - Default SATX 2 Pulse */
  {
    (int*)&pw_rfsx2,
    (float*)&a_rfsx2,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfsx2,
    3200.0,
    1000.0,/* Saturation, not excitation, bw */
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfsx2,
    0,
    (int*)&wg_rfsx2
  },
  /* RFPULSE 2 - Default SATY 1 Pulse */
  {
    (int*)&pw_rfsy1,
    (float*)&a_rfsy1,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfsy1,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfsy1,
    0,
    (int*)&wg_rfsy1
  },
  /* RFPULSE 3 - Default SATY 2 Pulse */
  {
    (int*)&pw_rfsy2,
    (float*)&a_rfsy2,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfsy2,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfsy2,
    0,
    (int*)&wg_rfsy2
  },
  /* RFPULSE 4 - Default SATZ 1 Pulse */
  {
    (int*)&pw_rfsz1,
    (FLOAT*)&a_rfsz1,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfsz1,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfsz1,
    0,
    (int*)&wg_rfsz1
  },
  /* RFPULSE 5 - Default SATZ 2 Pulse */
  {
    (int*)&pw_rfsz2,
    (FLOAT*)&a_rfsz2,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfsz2,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfsz2,
    0,
    (int*)&wg_rfsz2
  },

  /* RFPULSE 6 - Explicit SAT1 Pulse */
  {
    (int*)&pw_rfse1,
    (FLOAT*)&a_rfse1,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfse1,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfse1,
    0,
    (int*)&wg_rfse1
  },
  /* RFPULSE 7 - Explicit SAT2 Pulse */
  {
    (int*)&pw_rfse2,
    (FLOAT*)&a_rfse2,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfse2,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfse2,
    0,
    (int*)&wg_rfse2
  },
  /* RFPULSE 8 - Explicit SAT3 Pulse */
  {
    (int*)&pw_rfse3,
    (FLOAT*)&a_rfse3,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfse3,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfse3,
    0,
    (int*)&wg_rfse3
  },
  /* RFPULSE 9 - Explicit SAT4 Pulse */
  {
    (int*)&pw_rfse4,
    (FLOAT*)&a_rfse4,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfse4,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfse4,
    0,
    (int*)&wg_rfse4
  },
  /* RFPULSE 10 - Explicit SAT5 Pulse */
  {
    (int*)&pw_rfse5,
    (FLOAT*)&a_rfse5,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfse5,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfse5,
    0,
    (int*)&wg_rfse5
  },
  /* RFPULSE 11 -Explicit SAT6 Pulse */
  {
    (int*)&pw_rfse6,
    (FLOAT*)&a_rfse6,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfse6,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfse6,
    0,
    (int*)&wg_rfse6
  },
  /* RFPULSE 12 - ChemSat Pulse */
  {
    (int*)&pw_rfcssat,
    (FLOAT*)&a_rfcssat,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    0,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rfcssat,
    3200.0,
    1000.0,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int*)&res_rfcssat,
    1, /* spectral selective, so don't scale */
    (int*)&wg_rfcssat
  },
  /* RFPULSE 13 - RF1 Min Phase Alpha Pulse */
  {
    (int*)&pw_rf1,
    (float*)&a_rf1,
    SAR_ABS_SINC1,
    SAR_PSINC1,
    SAR_ASINC1,
    SAR_DTYCYC_SINC1,
    SAR_MAXPW_SINC1,
    1,
    MAX_B1_SINC1_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rf1,
    3200.0,
    1250.0,
    PSD_APS2_ON+PSD_MPS2_ON+PSD_SCAN_ON,
    0,
    0,
    1.0, 
    (int*)&res_rf1,
    0,
    (int*)&wg_rf1
  },
  /* RFPULSE 14 - RF0 Pulse */    /* This is the SLR 180 inversion */
  {
    (int*)&pw_rf0,
    (FLOAT*)&a_rf0,
    SAR_ABS_INVI0,
    SAR_PINVI0,
    SAR_AINVI0,
    SAR_DTYCYC_INVI0,
    SAR_MAXPW_INVI0,
    1,
    MAX_B1_INVI0_180,
    MAX_INT_B1_SQ_INVI0_180,
    MAX_RMS_B1_INVI0_180,
    180.0,
    &flip_rf0,
    5000.0,
    NOM_BW_INVI0,
    PSD_SCAN_ON+PSD_APS2_ON+PSD_MPS2_ON,
    0,
    0,
    1.0,
    (int*)&res_rf0,
    0,
    (int*)&wg_rf0
  },  
  /* RFPULSE 15 - T2 prep 90 Pulse */
  {
     (int *)&pw_rf90,
     (float *)&a_rf90,
     SAR_ABS_SINC1,
     SAR_PSINC1,
     SAR_ASINC1,
     SAR_DTYCYC_SINC1,
     SAR_MAXPW_SINC1,
     1,  
     MAX_B1_SINC1_90,
     MAX_INT_B1_SQ_SINC1_90,
     MAX_RMS_B1_SINC1_90,
     90.0,
     &flip_rf90,
     3200.0,
     1250.0,
     PSD_PULSE_OFF,
     0,  
     0,
     1.0,
     (int *)&res_rf90,
     0,
     (int *)&wg_rf90
  },
  /* RFPULSE 16 - T2 prep 180 refocus Pulse */
  {
     (int *)&pw_rf180,
     (FLOAT *)&a_rf180,
     SAR_ABS_SINC1,
     SAR_PSINC1,
     SAR_ASINC1,
     SAR_DTYCYC_SINC1,
     SAR_MAXPW_SINC1,
     1,
     MAX_B1_SINC1_90,
     MAX_INT_B1_SQ_SINC1_90,
     MAX_RMS_B1_SINC1_90,
     90.0,
     &flip_rf180,
     3200.0,
     1250.0,
     PSD_PULSE_OFF,
     0,
     0,
     1.0,
     (int *)&res_rf180,
     0,
     (int *)&wg_rf180
  },
  /* RFPULSE 17 - T2 prep Tipup Pulse */
  {
     (int *)&pw_rftipup,
     (float *)&a_rftipup,
     SAR_ABS_SINC1,
     SAR_PSINC1,
     SAR_ASINC1,
     SAR_DTYCYC_SINC1,
     SAR_MAXPW_SINC1,
     1,
     MAX_B1_SINC1_90,
     MAX_INT_B1_SQ_SINC1_90,
     MAX_RMS_B1_SINC1_90,
     90.0,
     &flip_rftipup,
     3200.0,
     1250.0,
     PSD_PULSE_OFF,
     0,
     0,
     1.0,
     (int *)&res_rftipup,
     0,
     (int *)&wg_rftipup
  },
  /* RFPULSE 18 - Hard 180 Pulse */
  {
    (int *)&pw_hard180,
    (float *)&a_hard180,
    SAR_ABS_HARD,
    SAR_HARD_EFF_WIDTH,
    SAR_AHARD,
    SAR_DTYCYC_HARD,
    SAR_MAXPW_HARD,
    1,
    MAX_B1_HARD,
    MAX_INT_B1_SQ_HARD,
    MAX_RMS_B1_HARD,
    180.0,
    &flip_hard180,
    NOM_PW_HARD,
    NOM_BW_HARD,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int *)&res_hard180,
    0,
    (int *)&wg_hard180
  },
  /* RFPULSE 19 - RFGIR01 Pulse */
  {
    (int *)&pw_rfgir01,
    (FLOAT *)&a_rfgir01,
    SAR_ABS_ADIABATIC,
    SAR_ADIABATIC_EFF_WIDTH,
    SAR_A_ADIABATIC, 
    SAR_DTYCYC_ADIABATIC, 
    SAR_MAXPW_ADIABATIC, 
    0, 
    MAX_B1_ADIABATIC, 
    MAX_INT_B1_SQ_ADIABATIC, 
    MAX_RMS_B1_ADIABATIC, 
    180.0, 
    &flip_rfgir01, 
    NOM_PW_ADIABATIC, 
    NOM_BW_INVI0, 
    PSD_PULSE_OFF, 
    0, 
    0, 
    1.0, 
    (int *)&res_rfgir01, 
    0,
    (int *)&wg_rfgir01
  },
  /* RFPULSE 20 - RFGIR02 Pulse */
  {
    (int *)&pw_rfgir02,
    (FLOAT *)&a_rfgir02,
    SAR_ABS_ADIABATIC,
    SAR_ADIABATIC_EFF_WIDTH,
    SAR_A_ADIABATIC,
    SAR_DTYCYC_ADIABATIC,
    SAR_MAXPW_ADIABATIC,
    0,
    MAX_B1_ADIABATIC,
    MAX_INT_B1_SQ_ADIABATIC,
    MAX_RMS_B1_ADIABATIC,
    180.0,
    &flip_rfgir02,
    NOM_PW_ADIABATIC,
    NOM_BW_INVI0,
    PSD_PULSE_OFF,
    0, 
    0, 
    1.0,
    (int*)&res_rfgir02,
    0,
    (int *)&wg_rfgir02
  },
  /* RFPULSE 21- FRIR Pulse for IFIR STIR */
  {
    (int *)&pw_rffrir,
    (FLOAT *)&a_rffrir,
    SAR_ABS_ADIABATIC,
    SAR_ADIABATIC_EFF_WIDTH,
    SAR_A_ADIABATIC,
    SAR_DTYCYC_ADIABATIC,
    SAR_MAXPW_ADIABATIC,
    0,
    MAX_B1_ADIABATIC,
    MAX_INT_B1_SQ_ADIABATIC,
    MAX_RMS_B1_ADIABATIC,
    180.0,
    &flip_rffrir,
    NOM_PW_ADIABATIC,
    NOM_BW_INVI0,
    PSD_PULSE_OFF,
    0, 0, 1.0,
    (int*)&res_rffrir,
    0,
    (int*)&wg_rffrir,
  },
  /* RFPULSE 22 - MSDE: 90 Excite Pulse */
  {
    (int *)&pw_rfflp90,
    (float *)&a_rfflp90,
    SAR_ABS_RFTRAPEZOID,
    SAR_EFF_RFTRAPEZOID,
    SAR_A_RFTRAPEZOID,
    SAR_DTYCYC_RFTRAPEZOID,
    SAR_MAXPW_RFTRAPEZOID,
    0,
    MAX_B1_RFTRAPEZOID,
    MAX_INT_B1_SQ_RFTRAPEZOID,
    MAX_RMS_B1_RFTRAPEZOID,
    NOM_FA_RFTRAPEZOID,
    &flip_rfflp90,
    NOM_PW_RFTRAPEZOID,
    NOM_BW_HARD,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int *)&res_rfflp90,
    0,
    (int *)&wg_rfflp90
  },
  /* RFPULSE 23 - MSDE: 180 refocus Pulse */
  {
    (int *)&pw_rfflp180,
    (FLOAT *)&a_rfflp180,
    SAR_ABS_RFTRAPEZOID,
    SAR_EFF_RFTRAPEZOID,
    SAR_A_RFTRAPEZOID,
    SAR_DTYCYC_RFTRAPEZOID,
    SAR_MAXPW_RFTRAPEZOID,
    0,
    MAX_B1_RFTRAPEZOID,
    MAX_INT_B1_SQ_RFTRAPEZOID,
    MAX_RMS_B1_RFTRAPEZOID,
    NOM_FA_RFTRAPEZOID,
    &flip_rfflp180,
    NOM_PW_RFTRAPEZOID,
    NOM_BW_HARD,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int *)&res_rfflp180,
    0,
    (int *)&wg_rfflp180
  },
  /* RFPULSE 24 - MSDE: 90 Tip-Up Pulse */
  {
    (int *)&pw_rfflp90r,
    (float *)&a_rfflp90r,
    SAR_ABS_RFTRAPEZOID,
    SAR_EFF_RFTRAPEZOID,
    SAR_A_RFTRAPEZOID,
    SAR_DTYCYC_RFTRAPEZOID,
    SAR_MAXPW_RFTRAPEZOID,
    0,
    MAX_B1_RFTRAPEZOID,
    MAX_INT_B1_SQ_RFTRAPEZOID,
    MAX_RMS_B1_RFTRAPEZOID,
    NOM_FA_RFTRAPEZOID,
    &flip_rfflp90r,
    NOM_PW_RFTRAPEZOID,
    NOM_BW_HARD,
    PSD_PULSE_OFF,
    0,
    0,
    1.0,
    (int *)&res_rfflp90r,
    0,
    (int *)&wg_rfflp90r
  },
/* RFPULSe 24 - RF1TM Sinc Pulse for Trajectory Mapping */
  {
    (int*)&pw_rf1tm,
    (float*)&a_rf1tm,
    SAR_ABS_TRUNC1,
    SAR_PTRUNC1,
    SAR_ATRUNC1,
    SAR_DTYCYC_TRUNC1,
    SAR_MAXPW_TRUNC1,
    1,
    MAX_B1_TRUNC1_24_90,
    MAX_INT_B1_SQ_SINC1_90,
    MAX_RMS_B1_SINC1_90,
    90.0,
    &flip_rf1tm,
    2400.0,
    1250.0,
    PSD_APS2_ON+PSD_MPS2_ON+PSD_SCAN_ON,
    0,
    0,
    1.0, 
    (int*)&res_rf1tm,
    0,
    (int*)&wg_rf1tm
  },

#include "rf_navmonitor.h"
#include "rf_Prescan.h"
};

  /* CRT ************************************* Pascal 08/07/13 */
  GRAD_PULSE gradx[MAX_GRADX] = {   /* changed to use MAX_GRADX from epic.h, BMK 2007.06.26 */
  /*************************************************************/ 
    /* GRADX 0 - Default X SAT 1 slice select */
    {
      G_TRAP, 
      (int *)&pw_gxrfsx1a, 
      (int *)&pw_gxrfsx1d, 
      (int *)&pw_gxrfsx1, 
      (FLOAT *)NULL,
      (FLOAT *)&a_gxrfsx1, 
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 1 - Default X SAT 2 slice select */
    {
      G_TRAP, 
      (int *)&pw_gxrfsx2a, 
      (int *)&pw_gxrfsx2d, 
      (int *)&pw_gxrfsx2,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gxrfsx2,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 2 - Killer for X Sat */
    {
      G_TRAP,
      (int *)&pw_gxksa,
      (int *)&pw_gxksd,
      (int *)&pw_gxks,
      (float *)NULL,
      (float*)&a_gxks,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0 ,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 3 - Killer for X Chem Sat */
    {
      G_TRAP,
      (int *)&pw_gxkcsa,
      (int *)&pw_gxkcsd,
      (int *)&pw_gxkcs,
      (float *)NULL,
      (float *)&a_gxkcs,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0 ,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 4 - X Freq Dephaser */
    {
      G_TRAP,
      (int *)&pw_gx1a,
      (int *)&pw_gx1d,
      (int *)&pw_gx1,
      (float *)NULL,
      (float *)&a_gx1,
      (float *)NULL,
      (float *)NULL,
      NULL,
      1,
      1.0 ,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 5 - Readout */
    {
      G_TRAP,
      (int *)&pw_gxwa,
      (int *)&pw_gxwd,
      (int *)&pw_gxw,
      (float *)&psd_zero,
      (float *)&a_gxw,
      (float *)&a_gxw,
      (float *)&a_gxw,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      1,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 6 - Extender */
    {
      G_TRAP,
      (int *)&pw_gxwexa,
      (int *)&pw_gxwexd,
      (int *)&pw_gxwex,
      (float *)&a_gxw,
      (float *)&a_gxwex,
      (float *)&a_gxwex,
      (float *)&psd_zero,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      1,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 7 - Readout */
    {
      G_TRAP,
      (int *)&pw_gx2a,
      (int *)&pw_gx2d,
      (int *)&pw_gx2,
      (float *)&psd_zero,
      (float *)&a_gx2,
      (float *)&a_gx2,
      (float *)&a_gx2,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      1,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 8 - Readout */
    {
      G_TRAP,
      (int *)&pw_gxw2a,
      (int *)&pw_gxw2d,
      (int *)&pw_gxw2,
      (float *)&psd_zero,
      (float *)&a_gxw2,
      (float *)&a_gxw2,
      (float *)&a_gxw2,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      1,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 9 - Readouts FC */
    {
      G_TRAP,
      (int *)&pw_gxfca,
      (int *)&pw_gxfcd,
      (int *)&pw_gxfc,
      (float *)NULL,
      (float *)&a_gxfc,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0
    },
    /* GRADX 10 - MSDE Velocity Encode (VENC) */
    {
      G_TRAP,
      (int *)&pw_gxflpvenca,
      (int *)&pw_gxflpvencd,
      (int *)&pw_gxflpvenc,
      (float *)NULL,
      (float *)&a_gxflpvenc,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 11 - killer after MSDE */
    {
      G_TRAP,
      (int *)&pw_gxflpka,
      (int *)&pw_gxflpkd,
      (int *)&pw_gxflpk,
      (float *)NULL,
      (float *)&a_gxflpk,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    }
    ,    /* GRADX 10 - Spiral Readout */ /* BMK 2007.06.26 */
    {
      G_SIN,
      (int *)NULL,
      (int *)NULL,
      (int *)&pw_gxspiral,
      (float *)NULL,
      (float *)&a_gxspiral,
      (float *)NULL,
      (float *)NULL,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 11 - X spoiler gradient for spiral, BMK 2007.06.26 */
    {
      G_TRAP,
      (int *)&pw_gxspoila,
      (int *)&pw_gxspoild,
      (int *)&pw_gxspoil,
      (FLOAT *)NULL,
      (FLOAT *)&a_gxspoil,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    /*************************************************************/
    },
    /* GRADX 12 - X spoiler gradient for 2nd spiral, BMK 2007.06.26 */
    {
      G_TRAP,
      (int *)&pw_gxspoil2a,
      (int *)&pw_gxspoil2d,
      (int *)&pw_gxspoil2,
      (FLOAT *)NULL,
      (FLOAT *)&a_gxspoil2,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    /*************************************************************/
    }
  };


 
  /* CRT ************************************* Pascal 08/07/13 */
  GRAD_PULSE grady[MAX_GRADY] = {   /* Changed to use MAX_GRADY from epic.h, BMK 2007.06.26 */
  /*************************************************************/ 
    /* GRADY 0 - Default Slice Select for Y Sat 1 */
    {
      G_TRAP,
      (int *)&pw_gyrfsy1a, 
      (int *)&pw_gyrfsy1d, 
      (int *)&pw_gyrfsy1,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gyrfsy1,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 1 - Default Slice Select for Y Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gyrfsy2a, 
      (int *)&pw_gyrfsy2d, 
      (int *)&pw_gyrfsy2,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gyrfsy2,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 2 -Killer for explicit Sat 1 */
    {
      G_TRAP,
      (int *)&pw_gykse1a,
      (int *)&pw_gykse1d,
      (int *)&pw_gykse1,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gykse1,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 3 - Killer for explicit Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gykse2a,
      (int *)&pw_gykse2d, 
      (int *)&pw_gykse2,
      (FLOAT *)NULL,
      (FLOAT *)&a_gykse2,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 4 - Killer for explicit Sat 3 */
    {
      G_TRAP,
      (int *)&pw_gykse3a,
      (int *)&pw_gykse3d,
      (int *)&pw_gykse3, 
      (FLOAT *)NULL,
      (FLOAT *)&a_gykse3,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 5 - Killer for explicit Sat 4 */
    {
      G_TRAP,
      (int *)&pw_gykse4a,
      (int *)&pw_gykse4d,
      (int *)&pw_gykse4,
      (FLOAT *)NULL,
      (FLOAT *)&a_gykse4,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 6 - Killer for explicit Sat 5 */
    {
      G_TRAP,
      (int *)&pw_gykse5a,
      (int *)&pw_gykse5d,
      (int *)&pw_gykse5,
      (FLOAT *)NULL,
      (FLOAT *)&a_gykse5,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 7 - Killer for explicit Sat 6 */
    {
      G_TRAP,
      (int *)&pw_gykse6a,
      (int *)&pw_gykse6d,
      (int *)&pw_gykse6,
      (FLOAT *)NULL,
      (FLOAT *)&a_gykse6,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 8 -Killer for X Sat 1 */
    {
      G_TRAP,
      (int *)&pw_gyksx1a,
      (int *)&pw_gyksx1d,
      (int *)&pw_gyksx1,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gyksx1,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 9 -Killer for X Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gyksx2a,
      (int *)&pw_gyksx2d,
      (int *)&pw_gyksx2,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gyksx2,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 10 - Killer for Y Sat 1 */
    {
      G_TRAP,
      (int *)&pw_gyksy1a,
      (int *)&pw_gyksy1d, 
      (int *)&pw_gyksy1,
      (FLOAT *)NULL,
      (FLOAT *)&a_gyksy1,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 11 - Killer for Y Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gyksy2a,
      (int *)&pw_gyksy2d, 
      (int *)&pw_gyksy2,
      (FLOAT *)NULL,
      (FLOAT *)&a_gyksy2,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 12 - Killer for Z Sat 1 */
    {
      G_TRAP,
      (int *)&pw_gyksz1a,
      (int *)&pw_gyksz1d,
      (int *)&pw_gyksz1,
      (FLOAT *)NULL,
      (FLOAT *)&a_gyksz1,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 13 - Killer for Z Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gyksz2a,
      (int *)&pw_gyksz2d,
      (int *)&pw_gyksz2,
      (FLOAT *)NULL,
      (FLOAT *)&a_gyksz2,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 14 - Phase Encodes and Rewinder */
    {
      G_ARBTRAP,
      (int *)&pw_gy1a,
      (int *)&pw_gy1d, 
      (int *)&pw_gy1,
      (FLOAT *)NULL,
      (FLOAT *)&a_gy1a,
      (FLOAT *)&a_gy1b,
      (FLOAT *)NULL,
      (char *)NULL,
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 15 - Phase Encodes and Rewinder */
    {
      G_ARBTRAP,
      (int *)&pw_gy1ra,
      (int *)&pw_gy1rd, 
      (int *)&pw_gy1r,
      (FLOAT *)NULL,
      (FLOAT *)&a_gy1ra,
      (FLOAT *)&a_gy1rb,
      (FLOAT *)NULL,
      (char *)NULL,
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 16 - Killer for Y Chem Sat */
    {
      G_TRAP,
      (int*)&pw_gykcsa,
      (int*)&pw_gykcsd,
      (int*)&pw_gykcs,
      (float *)NULL,
      (float *)&a_gykcs,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 17 - MSDE Velocity Encode (VENC) */
    {
      G_TRAP,
      (int *)&pw_gyflpvenca,
      (int *)&pw_gyflpvencd,
      (int *)&pw_gyflpvenc,
      (float *)NULL,
      (float *)&a_gyflpvenc,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 18 - killer after MSDE */
    {
      G_TRAP,
      (int *)&pw_gyflpka,
      (int *)&pw_gyflpkd,
      (int *)&pw_gyflpk,
      (float *)NULL,
      (float *)&a_gyflpk,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADY 19 - Flow Encode 1 */
    {
      G_TRAP,
      (int *)&pw_gyfe1a,
      (int *)&pw_gyfe1d,
      (int *)&pw_gyfe1,
      (float *)NULL,
      (float *)&a_gyfe1,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0
    },
    /* GRADY 20 - Flow Encode 2 */
    {
      G_TRAP,
      (int *)&pw_gyfe2a,
      (int *)&pw_gyfe2d,
      (int *)&pw_gyfe2,
      (float *)NULL,
      (float *)&a_gyfe2,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0
    /* CRT ************************************* Pascal 08/07/13 */
    },
        /* GRADY 17 - Spiral Readout */ /* BMK 2006.03.20 */
    {
      G_SIN,
      (int *)NULL,
      (int *)NULL,
      (int *)&pw_gyspiral,
      (float *)NULL,
      (float *)&a_gyspiral,
      (float *)NULL,
      (float *)NULL,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADX 18 - Y spoiler gradient for spiral, BMK 2006.03.20 */
    {
      G_TRAP,
      (int *)&pw_gyspoila,
      (int *)&pw_gyspoild,
      (int *)&pw_gyspoil,
      (FLOAT *)NULL,
      (FLOAT *)&a_gyspoil,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    /*************************************************************/ 
    }
  };



  /* CRT ************************************* Pascal 08/07/13 */
  GRAD_PULSE gradz[MAX_GRADZ] = {   /* BMK 2007.06.26, changed to use MAX_GRADZ from epic.h */
  /*************************************************************/ 
    /* GRADZ 0 - Default Slice Select for Z Sat 1 */
    {
      G_TRAP, 
      (int *)&pw_gzrfsz1a, 
      (int *)&pw_gzrfsz1d,
      (int *)&pw_gzrfsz1, 
      (FLOAT *)NULL,
      (FLOAT *)&a_gzrfsz1,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 1 - Default Slice Select for Z Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gzrfsz2a, 
      (int *)&pw_gzrfsz2d,
      (int *)&pw_gzrfsz2,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gzrfsz2,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 2 - Slice Select for Explicit Sat 1 */
    {
      G_TRAP, 
      (int *)&pw_gzrfse1a, 
      (int *)&pw_gzrfse1d,
      (int *)&pw_gzrfse1,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gzrfse1,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 3 - Slice Select for Explicit Sat 2 */
    {
      G_TRAP,
      (int *)&pw_gzrfse2a, 
      (int *)&pw_gzrfse2d,
      (int *)&pw_gzrfse2,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gzrfse2,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 4 - Slice Select for Explicit Sat 3 */
    {
      G_TRAP, 
      (int *)&pw_gzrfse3a, 
      (int *)&pw_gzrfse3d,
      (int *)&pw_gzrfse3, 
      (FLOAT *)NULL,
      (FLOAT *)&a_gzrfse3,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 5 - Slice Select for Explicit Sat 4 */
    {
      G_TRAP, 
      (int *)&pw_gzrfse4a, 
      (int *)&pw_gzrfse4d,
      (int *)&pw_gzrfse4,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gzrfse4,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 6 - Slice Select for Explicit Sat 5 */
    {
      G_TRAP, 
      (int *)&pw_gzrfse5a, 
      (int *)&pw_gzrfse5d,
      (int *)&pw_gzrfse5,
      (FLOAT *)NULL, 
      (FLOAT *)&a_gzrfse5,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 7 - Slice Select for Explicit Sat 6 */
    {
      G_TRAP, 
      (int *)&pw_gzrfse6a, 
      (int *)&pw_gzrfse6d,
      (int *)&pw_gzrfse6, 
      (FLOAT *)NULL,
      (FLOAT *)&a_gzrfse6,
      (FLOAT *)NULL,
      (FLOAT *)NULL, 
      (char *)NULL, 
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 8 - Killer for Z Sat */
    {
      G_TRAP,
      (int *)&pw_gzksa,
      (int *)&pw_gzksd,
      (int *)&pw_gzks,
      (float *)NULL,
      (float *)&a_gzks,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0 ,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 9 - Killer for Z Chem Sat */
    {
      G_TRAP,
      (int *)&pw_gzkcsa,
      (int *)&pw_gzkcsd,
      (int *)&pw_gzkcs,
      (float *)NULL,
      (float *)&a_gzkcs,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 10 - 90 Slab Select  */
    {
      G_TRAP,
      (int *)&pw_gzrf1a,
      (int *)&pw_gzrf1d,
      (int *)&pw_gzrf1,
      (float *)NULL,
      (float *)&a_gzrf1,
      (float *)NULL,
      (float *)NULL,
      NULL,
      1,
      1.0 ,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 11 - Z combined refocus and slice select */
    {
      G_ARBTRAP,
      (int *)&pw_gzcomba,
      (int *)&pw_gzcombd,
      (int *)&pw_gzcomb,
      (float *)NULL,
      (float *)&a_gzcomba,
      (float *)&a_gzcombb,
      (float *)NULL,
      NULL,
      1,
      1.0 ,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 12 - Z combined rewinder and killer */
    {
      G_ARBTRAP,
      (int *)&pw_gzpa,
      (int *)&pw_gzpd,
      (int *)&pw_gzp,
      (float *)NULL,
      (float *)&a_gzpa,
      (float *)&a_gzpb,
      (float *)NULL,
      NULL,
      1,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 13 - Inversion slice select for IR prep*/
    {
      G_TRAP,
      (int *)&pw_gzrf0a,
      (int *)&pw_gzrf0d,
      (int *)&pw_gzrf0,
      (float *)NULL,
      (FLOAT *)&a_gzrf0,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 14 - Z Killer for IR prep */
    {
      G_TRAP,
      (int *)&pw_gzrf0ka,
      (int *)&pw_gzrf0kd,
      (int *)&pw_gzrf0k,
      (float *)NULL,
      (float *)&a_gzrf0k,
      (float *)NULL,
      (float *)NULL,
      NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 15 - killer after tipup */
    {
      G_TRAP,
      (int *)&pw_gzkillera,
      (int *)&pw_gzkillerd,
      (int *)&pw_gzkiller,
      (float *)NULL,
      (float *)&a_gzkiller,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0, 
      1.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0, 
      0,
      0.0
    },
    /* GRADZ 16 - slice select flowcomp */
    {
      G_TRAP,
      (int *)&pw_gz1a,
      (int *)&pw_gz1d,
      (int *)&pw_gz1,
      (float *)NULL,
      (float *)&a_gz1,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      1,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0        /* for SGD heating */
    },
    /* GRADZ 17 - Killer after one segment in one R-R interval (GZK). */
    {
      G_TRAP,
      (int *)&pw_gzka,
      (int *)&pw_gzkd,
      (int *)&pw_gzk,
      (float *)NULL,
      (float *)&a_gzk,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0
    },
    /* GRADZ 18 - slice select for Graphic IR */
    {
      G_TRAP,
      (int *)&pw_gzrfgir01a,
      (int *)&pw_gzrfgir01d,
      (int *)&pw_gzrfgir01,
      (FLOAT *)NULL,
      (FLOAT *)&a_gzrfgir01,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0     /* for SGD heating */
    },
   /* GRADZ 19 - Killer pulse for Graphic IR */
    {
      G_TRAP,
      (int *)&pw_gzkgir01a,
      (int *)&pw_gzkgir01d,
      (int *)&pw_gzkgir01,
      (FLOAT *)NULL,
      (FLOAT *)&a_gzkgir01,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0     /* for SGD heating */
    },
    /* GRADZ 20 - slice select for Graphic IR */
    {
      G_TRAP,
      (int *)&pw_gzrfgir02a,
      (int *)&pw_gzrfgir02d,
      (int *)&pw_gzrfgir02,
      (FLOAT *)NULL,
      (FLOAT *)&a_gzrfgir02,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0     /* for SGD heating */
    },
    /* GRADZ 21 - Killer pulse for Graphic IR */
    {
      G_TRAP,
      (int *)&pw_gzkgir02a,
      (int *)&pw_gzkgir02d,
      (int *)&pw_gzkgir02,
      (FLOAT *)NULL,
      (FLOAT *)&a_gzkgir02,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0     /* for SGD heating */
    },
    /* GRADZ 22 - slice select for STIR */
    {
      G_TRAP,
      (int *)&pw_gzrffrira,
      (int *)&pw_gzrffrird,
      (int *)&pw_gzrffrir,
      (FLOAT *)NULL,
      (FLOAT *)&a_gzrffrir,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0, 
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0     /* for SGD heating */
    },
    /* GRADZ 23 - Killer pulse for FRIR */
    {
      G_TRAP,
      (int *)&pw_gzkrffrira,
      (int *)&pw_gzkrffrird,
      (int *)&pw_gzkrffrir,
      (FLOAT *)NULL,
      (FLOAT *)&a_gzkrffrir,
      (FLOAT *)NULL,
      (FLOAT *)NULL,
      (char *)NULL,
      0,
      1.0, 
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0     /* for SGD heating */
    },
    /* GRADZ 24 - MSDE Velocity Encode (VENC) */
    {
      G_TRAP,
      (int *)&pw_gzflpvenca,
      (int *)&pw_gzflpvencd,
      (int *)&pw_gzflpvenc,
      (float *)NULL,
      (float *)&a_gzflpvenc,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL ,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    },
    /* GRADZ 25 - killer after MSDE */
    {
      G_TRAP,
      (int *)&pw_gzflpka,
      (int *)&pw_gzflpkd,
      (int *)&pw_gzflpk,
      (float *)NULL,
      (float *)&a_gzflpk,
      (float *)NULL,
      (float *)NULL,
      (char *)NULL,
      0,
      1.0,
      (int *)NULL,
      0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0.0,
      0,
      0,
      0.0 /* intabspwmcurr */
    }
  };
